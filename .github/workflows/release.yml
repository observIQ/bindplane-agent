name: release
on:
  push:
    tags:
      - 'v*'

jobs:
  build-msi:
    runs-on: windows-2019
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.17"
          check-latest: true
      - name: Cache Go Modules
        uses: actions/cache@v2
        with:
          path: |
            %LocalAppData%\go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build Windows Binary
        run: |
          make build-windows
          cp dist/collector_windows_amd64.exe windows/observiq-collector.exe
      - name: Get Stanza Plugins Ref
        id: plugins
        run: echo "::set-output name=ref::$(Get-Content ./PLUGINS_VERSION)"
      - name: Get JMX Jar Version
        id: jmx-jar
        run: echo "::set-output name=release::$(Get-Content ./JAVA_CONTRIB_VERSION)"
      - name: Checkout Plugins
        uses: actions/checkout@v2
        with:
          repository: observIQ/stanza-plugins
          ref: ${{ steps.plugins.outputs.ref }}
          path: stanza-plugins
      - name: Copy Plugins to MSI Build Directory
        run: cp -r stanza-plugins/plugins windows/
      - name: Copy Example Config
        run: cp config/example.yaml windows/config.yaml
      - name: Download JMX Receiver Jar
        run: curl -f -L -o windows/opentelemetry-java-contrib-jmx-metrics.jar https://github.com/open-telemetry/opentelemetry-java-contrib/releases/download/${{ steps.jmx-jar.outputs.release }}/opentelemetry-jmx-metrics.jar
      # HACK: Copy build directory to C drive to avoid this error, since there must be a relative path from the tempdir that go-msi uses
      # for the MSI to build properly
      - name: Copy Build Dir
        run: |
          cp -r windows C:/build
          echo "C:/build" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      # Installs go-msi and wix.
      - name: Install Build Tools
        run: 	|
          curl -f -L -o go-msi.exe https://github.com/observIQ/go-msi/releases/download/v2.0.0/go-msi.exe
          curl -f -L -o wix310-binaries.zip http://wixtoolset.org/downloads/v3.10.3.3007/wix310-binaries.zip
          unzip wix310-binaries.zip
        working-directory: C:/build
      - name: Get Tag From Environment
        id: get-tag
        run: printf '::set-output name=tag::%s' "$(printf '%s' "${{ github.ref }}" | sed 's/refs\/tags\///')"
      - name: "Build MSI from Tagged Release"
        run: go-msi.exe make -m observiq-collector.msi --version ${{ steps.get-tag.outputs.tag }} --arch amd64
        working-directory: C:/build
      - name: Install MSI
        run: msiexec.exe /qn /i observiq-collector.msi
        working-directory: C:/build
      - name: Install CINC (Inspec)
        run: . { iwr -useb https://omnitruck.cinc.sh/install.ps1 } | iex; install -project cinc-auditor -version 4
      - name: Run CINC (Inspec) Install Tests
        run: C:/cinc-project/cinc-auditor/bin/cinc-auditor.bat exec install.rb
        working-directory: C:/build/test
      - name: Uninstall MSI
        run: |
          msiexec.exe /qn /x observiq-collector.msi
          sleep 5
        working-directory: C:/build/windows
      - name: Run CINC (Inspec) Uninstall Tests
        run: C:/cinc-project/cinc-auditor/bin/cinc-auditor.bat exec uninstall.rb
        working-directory: C:/build/test
      - name: "Rename MSI to include version tag"
        run: mv observiq-collector.msi observiq-collector-${{ steps.get-tag.outputs.tag }}.msi
        working-directory: C:/build
      - name: "Upload MSI"
        uses: actions/upload-artifact@v2
        with:
          name: observiq-collector-${{ steps.get-tag.outputs.tag }}.msi
          path: C:/build/observiq-collector-${{ steps.get-tag.outputs.tag }}.msi
          # Short lived because Go Releaser will upload the msi to a release (github release, gcs, etc)
          retention-days: 1
  build-container-image:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Set up Go 1.17
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.GH_READ_RELEASE_TOKEN }}
        run: git config --global url."https://${TOKEN}:x-oauth-basic@github.com".insteadOf "https://github.com"
      - name: Cache Go
        id: go-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-go-modules
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
            /home/runner/go/bin
          key: v1-go-pkg-mod-${{ runner.os }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
      - name: Install Dependencies
        if: steps.go-cache.outputs.hit != 'true'
        run: |
          make install-tools
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - name: Get Tag From Environment
        id: get-tag
        run: printf '::set-output name=tag::%s' "$(printf '%s' "${{ github.ref }}" | sed 's/refs\/tags\///')"
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          # Supporting only linux/amd64 to keep builds fast. arm can
          # be enabled anytime by updating the `platforms` key.
          #platforms: linux/amd64,linux/arm64
          platforms: linux/amd64
          push: true
          # uncomment to override jar version: https://github.com/open-telemetry/opentelemetry-java-contrib/releases
          #build-args: |
          #  JMX_JAR_VERSION=v1.7.0
          tags: |
            observiq/observiq-collector:${{ steps.get-tag.outputs.tag }}
  release:
    needs: [build-msi]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          # For goreleaser
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
          check-latest: true
      - name: "Get Tag From Environment"
        id: get-tag
        run: printf '::set-output name=tag::%s' "$(printf '%s' "${{ github.ref }}" | sed 's/refs\/tags\///')"
      - name: Retrieve Windows MSI Installer
        uses: actions/download-artifact@v2
        with:
          name: observiq-collector-${{ steps.get-tag.outputs.tag }}.msi
          path: observiq-collector-${{ steps.get-tag.outputs.tag }}.msi
        # install tools for cosign
      - name: Install Dependencies
        run: |
          make install-tools
      - name: Build cosign key file
        run: 'echo "$COSIGN_PRIVATE_KEY" >> cosign.key'
        shell: bash
        env:
          COSIGN_PRIVATE_KEY : ${{secrets.ORG_COSIGN_PRIVATE_KEY}}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          distribution: goreleaser
          version: "v1.5.0"
          args: release --rm-dist
        env:
          # Default github token should have enough permissions to make a release
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COSIGN_PWD: ${{ secrets.ORG_COSIGN_PWD }}
