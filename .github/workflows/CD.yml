name: CD
on:
  release:
    types: [ published ]

jobs:
  # This is the first job run; If any step in this fails the release will not be updated.
  # This protects against releases that don't match specific criteria:
  #   1. Tag must be a semantic version ((v)d.d.d)
  #   2. Release must be a pre-release
  #   3. The tag version must match the version in the VERSION file 
  check-should-edit-release:
    runs-on: ubuntu-latest
    steps:
      - name: Get Tag From Environment
        id: get-tag
        run: printf '::set-output name=tag::%s' "$(printf '%s' "${{ github.ref }}" | sed 's/refs\/tags\///')"
      - name: Check the tag is a semantic version
        run: "[[ ${{ steps.get-tag.outputs.tag }} =~ ^v?[0-9]+\\.[0-9]+\\.[0-9]+ ]] && exit 0 || exit 1"
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Check tag matches VERSION file
        run: |
          [ $(printf '%s' "${{ steps.get-tag.outputs.tag }}" | sed 's/^v//') = $(<VERSION) ] \
          && exit 0 || exit 1
      - name: Fetch Release Info
        uses: ./.github/actions/get-release-info
        id: release-info
        with:
          tag: ${{ steps.get-tag.outputs.tag }}
      - name: Check release is pre-release
        run: '[ "${{ steps.release-info.outputs.pre-release }}" = "true" ] && exit 0 || exit 1'
        
  setup-environment:
    runs-on: ubuntu-latest
    needs: check-should-edit-release
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Cache Go
        id: go-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-go-modules
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
            /home/runner/go/bin
          key: v1-go-pkg-mod-${{ runner.os }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
      - name: Install Dependencies
        if: steps.go-cache.outputs.hit != 'true'
        run: |
          go mod download
          make install-tools
  ci-checks:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Cache Go
        id: go-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-go-modules
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
            /home/runner/go/bin
          key: v1-go-pkg-mod-${{ runner.os }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
      - name: Install Dependencies
        if: steps.go-cache.outputs.hit != 'true'
        run: |
          go mod download
          make install-tools
      - name: CI Checks
        run: make -j3 check-fmt misspell lint
  test:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Cache Go
        id: go-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-go-modules
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
            /home/runner/go/bin
          key: v1-go-pkg-mod-${{ runner.os }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
      - name: Install Dependencies
        if: steps.go-cache.outputs.hit != 'true'
        run: |
          go mod download
          make install-tools
      - name: Go Test
        run: make test
  build:
    runs-on: ubuntu-latest
    needs: [ ci-checks, test ]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - name: Setup Go Environment
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Cache Go
        id: go-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-go-modules
        with:
          path: |
            /home/runner/go/pkg/mod
            /home/runner/.cache/go-build
            /home/runner/go/bin
          key: v1-go-pkg-mod-${{ runner.os }}-${{ hashFiles('**/go.mod', '**/go.sum') }}
      - name: Install Dependencies
        if: steps.go-cache.outputs.hit != 'true'
        run: |
          go mod download
          make install-tools
      - name: Build All Targets
        run: make -j4 build-all
      - name: Get Tag From Environment
        id: get-tag
        run: printf '::set-output name=tag::%s' "$(printf '%s' "${{ github.ref }}" | sed 's/refs\/tags\///')"
      - name: Get Tag (no prefix)
        id: get-tag-no-prefix
        run: printf '::set-output name=tag::%s' "$(printf '%s' ${{ steps.get-tag.outputs.tag }} | sed 's/^v//')"
      - name: Upload Release Binaries (GCS)
        uses: google-github-actions/upload-cloud-storage@main
        with:
          credentials: ${{ secrets.GCS_SA_KEY }}
          path: ./build
          destination: observiq-collector/collector/${{ steps.get-tag-no-prefix.outputs.tag }}
          parent: false
      - name: Upload Release Binaries (GitHub Releases)
        uses: ./.github/actions/upsert-release-artifacts
        with:
          path: ./build/
          tag: ${{ steps.get-tag.outputs.tag }}


