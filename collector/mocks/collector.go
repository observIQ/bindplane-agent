// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	collector "github.com/observiq/observiq-otel-collector/collector"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Collector is an autogenerated mock type for the Collector type
type Collector struct {
	mock.Mock
}

// Restart provides a mock function with given fields: _a0
func (_m *Collector) Restart(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Run provides a mock function with given fields: _a0
func (_m *Collector) Run(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Collector) Status() <-chan *collector.Status {
	ret := _m.Called()

	var r0 <-chan *collector.Status
	if rf, ok := ret.Get(0).(func() <-chan *collector.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *collector.Status)
		}
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Collector) Stop() {
	_m.Called()
}

// NewCollector creates a new instance of Collector. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewCollector(t testing.TB) *Collector {
	mock := &Collector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
