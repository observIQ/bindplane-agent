// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	protobufs "github.com/open-telemetry/opamp-go/protobufs"
	mock "github.com/stretchr/testify/mock"

	testing "testing"

	types "github.com/open-telemetry/opamp-go/client/types"
)

// MockClient is an autogenerated mock type for the OpAMPClient type
type MockClient struct {
	mock.Mock
}

// AgentDescription provides a mock function with given fields:
func (_m *MockClient) AgentDescription() *protobufs.AgentDescription {
	ret := _m.Called()

	var r0 *protobufs.AgentDescription
	if rf, ok := ret.Get(0).(func() *protobufs.AgentDescription); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protobufs.AgentDescription)
		}
	}

	return r0
}

// SetAgentDescription provides a mock function with given fields: descr
func (_m *MockClient) SetAgentDescription(descr *protobufs.AgentDescription) error {
	ret := _m.Called(descr)

	var r0 error
	if rf, ok := ret.Get(0).(func(*protobufs.AgentDescription) error); ok {
		r0 = rf(descr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx, settings
func (_m *MockClient) Start(ctx context.Context, settings types.StartSettings) error {
	ret := _m.Called(ctx, settings)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.StartSettings) error); ok {
		r0 = rf(ctx, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields: ctx
func (_m *MockClient) Stop(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEffectiveConfig provides a mock function with given fields: ctx
func (_m *MockClient) UpdateEffectiveConfig(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockClient creates a new instance of MockClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClient(t testing.TB) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
