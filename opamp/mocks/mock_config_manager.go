// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	opamp "github.com/observiq/observiq-otel-collector/opamp"
	protobufs "github.com/open-telemetry/opamp-go/protobufs"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockConfigManager is an autogenerated mock type for the ConfigManager type
type MockConfigManager struct {
	mock.Mock
}

// AddConfig provides a mock function with given fields: configName, reloader
func (_m *MockConfigManager) AddConfig(configName string, reloader *opamp.ManagedConfig) {
	_m.Called(configName, reloader)
}

// ApplyConfigChanges provides a mock function with given fields: remoteConfig
func (_m *MockConfigManager) ApplyConfigChanges(remoteConfig *protobufs.AgentRemoteConfig) (bool, error) {
	ret := _m.Called(remoteConfig)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*protobufs.AgentRemoteConfig) bool); ok {
		r0 = rf(remoteConfig)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*protobufs.AgentRemoteConfig) error); ok {
		r1 = rf(remoteConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComposeEffectiveConfig provides a mock function with given fields:
func (_m *MockConfigManager) ComposeEffectiveConfig() (*protobufs.EffectiveConfig, error) {
	ret := _m.Called()

	var r0 *protobufs.EffectiveConfig
	if rf, ok := ret.Get(0).(func() *protobufs.EffectiveConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*protobufs.EffectiveConfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockConfigManager creates a new instance of MockConfigManager. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockConfigManager(t testing.TB) *MockConfigManager {
	mock := &MockConfigManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
