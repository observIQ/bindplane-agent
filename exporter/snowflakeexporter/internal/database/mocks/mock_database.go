// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

// BatchInsert provides a mock function with given fields: ctx, data, warehouse, insertSQL
func (_m *MockDatabase) BatchInsert(ctx context.Context, data []map[string]interface{}, warehouse string, insertSQL string) error {
	ret := _m.Called(ctx, data, warehouse, insertSQL)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []map[string]interface{}, string, string) error); ok {
		r0 = rf(ctx, data, warehouse, insertSQL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockDatabase) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSchema provides a mock function with given fields: ctx, schema
func (_m *MockDatabase) CreateSchema(ctx context.Context, schema string) error {
	ret := _m.Called(ctx, schema)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, schema)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTable provides a mock function with given fields: ctx, _a1, schema, table, template
func (_m *MockDatabase) CreateTable(ctx context.Context, _a1 string, schema string, table string, template string) error {
	ret := _m.Called(ctx, _a1, schema, table, template)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, _a1, schema, table, template)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
