// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"reflect"
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
)

func TestDefaultMetrics(t *testing.T) {
	start := pcommon.Timestamp(1_000_000_000)
	ts := pcommon.Timestamp(1_000_001_000)
	mb := NewMetricsBuilder(DefaultMetricsSettings(), component.BuildInfo{}, WithStartTime(start))
	enabledMetrics := make(map[string]bool)

	enabledMetrics["sapnetweaver.host.cpu_utilization"] = true
	mb.RecordSapnetweaverHostCPUUtilizationDataPoint(ts, "1")

	enabledMetrics["sapnetweaver.host.memory.virtual.overhead"] = true
	mb.RecordSapnetweaverHostMemoryVirtualOverheadDataPoint(ts, 1)

	enabledMetrics["sapnetweaver.host.memory.virtual.swap"] = true
	mb.RecordSapnetweaverHostMemoryVirtualSwapDataPoint(ts, 1)

	enabledMetrics["sapnetweaver.host.spool_list.used"] = true
	mb.RecordSapnetweaverHostSpoolListUsedDataPoint(ts, "1")

	enabledMetrics["sapnetweaver.icm_availability"] = true
	mb.RecordSapnetweaverIcmAvailabilityDataPoint(ts, 1, AttributeControlState(1))

	enabledMetrics["sapnetweaver.locks.enqueue.count"] = true
	mb.RecordSapnetweaverLocksEnqueueCountDataPoint(ts, 1)

	enabledMetrics["sapnetweaver.sessions.browser.count"] = true
	mb.RecordSapnetweaverSessionsBrowserCountDataPoint(ts, "1")

	enabledMetrics["sapnetweaver.sessions.ejb.count"] = true
	mb.RecordSapnetweaverSessionsEjbCountDataPoint(ts, "1")

	enabledMetrics["sapnetweaver.sessions.http.count"] = true
	mb.RecordSapnetweaverSessionsHTTPCountDataPoint(ts, "1")

	enabledMetrics["sapnetweaver.sessions.security.count"] = true
	mb.RecordSapnetweaverSessionsSecurityCountDataPoint(ts, "1")

	enabledMetrics["sapnetweaver.sessions.web.count"] = true
	mb.RecordSapnetweaverSessionsWebCountDataPoint(ts, "1")

	enabledMetrics["sapnetweaver.short_dumps.rate"] = true
	mb.RecordSapnetweaverShortDumpsRateDataPoint(ts, "1")

	enabledMetrics["sapnetweaver.work_processes.active.count"] = true
	mb.RecordSapnetweaverWorkProcessesActiveCountDataPoint(ts, "1")

	metrics := mb.Emit()

	assert.Equal(t, 1, metrics.ResourceMetrics().Len())
	sm := metrics.ResourceMetrics().At(0).ScopeMetrics()
	assert.Equal(t, 1, sm.Len())
	ms := sm.At(0).Metrics()
	assert.Equal(t, len(enabledMetrics), ms.Len())
	seenMetrics := make(map[string]bool)
	for i := 0; i < ms.Len(); i++ {
		assert.True(t, enabledMetrics[ms.At(i).Name()])
		seenMetrics[ms.At(i).Name()] = true
	}
	assert.Equal(t, len(enabledMetrics), len(seenMetrics))
}

func TestAllMetrics(t *testing.T) {
	start := pcommon.Timestamp(1_000_000_000)
	ts := pcommon.Timestamp(1_000_001_000)
	settings := MetricsSettings{
		SapnetweaverHostCPUUtilization:        MetricSettings{Enabled: true},
		SapnetweaverHostMemoryVirtualOverhead: MetricSettings{Enabled: true},
		SapnetweaverHostMemoryVirtualSwap:     MetricSettings{Enabled: true},
		SapnetweaverHostSpoolListUsed:         MetricSettings{Enabled: true},
		SapnetweaverIcmAvailability:           MetricSettings{Enabled: true},
		SapnetweaverLocksEnqueueCount:         MetricSettings{Enabled: true},
		SapnetweaverSessionsBrowserCount:      MetricSettings{Enabled: true},
		SapnetweaverSessionsEjbCount:          MetricSettings{Enabled: true},
		SapnetweaverSessionsHTTPCount:         MetricSettings{Enabled: true},
		SapnetweaverSessionsSecurityCount:     MetricSettings{Enabled: true},
		SapnetweaverSessionsWebCount:          MetricSettings{Enabled: true},
		SapnetweaverShortDumpsRate:            MetricSettings{Enabled: true},
		SapnetweaverWorkProcessesActiveCount:  MetricSettings{Enabled: true},
	}
	mb := NewMetricsBuilder(settings, component.BuildInfo{}, WithStartTime(start))

	mb.RecordSapnetweaverHostCPUUtilizationDataPoint(ts, "1")
	mb.RecordSapnetweaverHostMemoryVirtualOverheadDataPoint(ts, 1)
	mb.RecordSapnetweaverHostMemoryVirtualSwapDataPoint(ts, 1)
	mb.RecordSapnetweaverHostSpoolListUsedDataPoint(ts, "1")
	mb.RecordSapnetweaverIcmAvailabilityDataPoint(ts, 1, AttributeControlState(1))
	mb.RecordSapnetweaverLocksEnqueueCountDataPoint(ts, 1)
	mb.RecordSapnetweaverSessionsBrowserCountDataPoint(ts, "1")
	mb.RecordSapnetweaverSessionsEjbCountDataPoint(ts, "1")
	mb.RecordSapnetweaverSessionsHTTPCountDataPoint(ts, "1")
	mb.RecordSapnetweaverSessionsSecurityCountDataPoint(ts, "1")
	mb.RecordSapnetweaverSessionsWebCountDataPoint(ts, "1")
	mb.RecordSapnetweaverShortDumpsRateDataPoint(ts, "1")
	mb.RecordSapnetweaverWorkProcessesActiveCountDataPoint(ts, "1")

	metrics := mb.Emit(WithSapnetweaverInstance("attr-val"), WithSapnetweaverNode("attr-val"))

	assert.Equal(t, 1, metrics.ResourceMetrics().Len())
	rm := metrics.ResourceMetrics().At(0)
	attrCount := 0
	attrCount++
	attrVal, ok := rm.Resource().Attributes().Get("sapnetweaver.instance")
	assert.True(t, ok)
	assert.EqualValues(t, "attr-val", attrVal.Str())
	attrCount++
	attrVal, ok = rm.Resource().Attributes().Get("sapnetweaver.node")
	assert.True(t, ok)
	assert.EqualValues(t, "attr-val", attrVal.Str())
	assert.Equal(t, attrCount, rm.Resource().Attributes().Len())

	assert.Equal(t, 1, rm.ScopeMetrics().Len())
	ms := rm.ScopeMetrics().At(0).Metrics()
	allMetricsCount := reflect.TypeOf(MetricsSettings{}).NumField()
	assert.Equal(t, allMetricsCount, ms.Len())
	validatedMetrics := make(map[string]struct{})
	for i := 0; i < ms.Len(); i++ {
		switch ms.At(i).Name() {
		case "sapnetweaver.host.cpu_utilization":
			assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
			assert.Equal(t, "CPU Utilization Percentage.", ms.At(i).Description())
			assert.Equal(t, "%", ms.At(i).Unit())
			dp := ms.At(i).Gauge().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.host.cpu_utilization"] = struct{}{}
		case "sapnetweaver.host.memory.virtual.overhead":
			assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
			assert.Equal(t, "Virtualization System Memory Overhead.", ms.At(i).Description())
			assert.Equal(t, "bytes", ms.At(i).Unit())
			dp := ms.At(i).Gauge().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.host.memory.virtual.overhead"] = struct{}{}
		case "sapnetweaver.host.memory.virtual.swap":
			assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
			assert.Equal(t, "Virtualization System Swap Memory.", ms.At(i).Description())
			assert.Equal(t, "bytes", ms.At(i).Unit())
			dp := ms.At(i).Gauge().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.host.memory.virtual.swap"] = struct{}{}
		case "sapnetweaver.host.spool_list.used":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "Host Spool List Used.", ms.At(i).Description())
			assert.Equal(t, "", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.host.spool_list.used"] = struct{}{}
		case "sapnetweaver.icm_availability":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "ICM Availability (color value from alert tree).", ms.At(i).Description())
			assert.Equal(t, "", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			attrVal, ok := dp.Attributes().Get("state")
			assert.True(t, ok)
			assert.Equal(t, AttributeControlState(1).String(), attrVal.Str())
			validatedMetrics["sapnetweaver.icm_availability"] = struct{}{}
		case "sapnetweaver.locks.enqueue.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "Count of Enqueued Locks.", ms.At(i).Description())
			assert.Equal(t, "{locks}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.locks.enqueue.count"] = struct{}{}
		case "sapnetweaver.sessions.browser.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of Browser Sessions.", ms.At(i).Description())
			assert.Equal(t, "{sessions}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.sessions.browser.count"] = struct{}{}
		case "sapnetweaver.sessions.ejb.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of EJB Sessions.", ms.At(i).Description())
			assert.Equal(t, "{sessions}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.sessions.ejb.count"] = struct{}{}
		case "sapnetweaver.sessions.http.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of HTTP Sessions.", ms.At(i).Description())
			assert.Equal(t, "{sessions}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.sessions.http.count"] = struct{}{}
		case "sapnetweaver.sessions.security.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of Security Sessions.", ms.At(i).Description())
			assert.Equal(t, "{sessions}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.sessions.security.count"] = struct{}{}
		case "sapnetweaver.sessions.web.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of Web Sessions.", ms.At(i).Description())
			assert.Equal(t, "{sessions}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.sessions.web.count"] = struct{}{}
		case "sapnetweaver.short_dumps.rate":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The rate of Short Dumps.", ms.At(i).Description())
			assert.Equal(t, "{dumps/min}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.short_dumps.rate"] = struct{}{}
		case "sapnetweaver.work_processes.active.count":
			assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
			assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
			assert.Equal(t, "The number of active work processes.", ms.At(i).Description())
			assert.Equal(t, "{work processes}", ms.At(i).Unit())
			assert.Equal(t, false, ms.At(i).Sum().IsMonotonic())
			assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
			dp := ms.At(i).Sum().DataPoints().At(0)
			assert.Equal(t, start, dp.StartTimestamp())
			assert.Equal(t, ts, dp.Timestamp())
			assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
			assert.Equal(t, int64(1), dp.IntValue())
			validatedMetrics["sapnetweaver.work_processes.active.count"] = struct{}{}
		}
	}
	assert.Equal(t, allMetricsCount, len(validatedMetrics))
}

func TestNoMetrics(t *testing.T) {
	start := pcommon.Timestamp(1_000_000_000)
	ts := pcommon.Timestamp(1_000_001_000)
	settings := MetricsSettings{
		SapnetweaverHostCPUUtilization:        MetricSettings{Enabled: false},
		SapnetweaverHostMemoryVirtualOverhead: MetricSettings{Enabled: false},
		SapnetweaverHostMemoryVirtualSwap:     MetricSettings{Enabled: false},
		SapnetweaverHostSpoolListUsed:         MetricSettings{Enabled: false},
		SapnetweaverIcmAvailability:           MetricSettings{Enabled: false},
		SapnetweaverLocksEnqueueCount:         MetricSettings{Enabled: false},
		SapnetweaverSessionsBrowserCount:      MetricSettings{Enabled: false},
		SapnetweaverSessionsEjbCount:          MetricSettings{Enabled: false},
		SapnetweaverSessionsHTTPCount:         MetricSettings{Enabled: false},
		SapnetweaverSessionsSecurityCount:     MetricSettings{Enabled: false},
		SapnetweaverSessionsWebCount:          MetricSettings{Enabled: false},
		SapnetweaverShortDumpsRate:            MetricSettings{Enabled: false},
		SapnetweaverWorkProcessesActiveCount:  MetricSettings{Enabled: false},
	}
	mb := NewMetricsBuilder(settings, component.BuildInfo{}, WithStartTime(start))
	mb.RecordSapnetweaverHostCPUUtilizationDataPoint(ts, "1")
	mb.RecordSapnetweaverHostMemoryVirtualOverheadDataPoint(ts, 1)
	mb.RecordSapnetweaverHostMemoryVirtualSwapDataPoint(ts, 1)
	mb.RecordSapnetweaverHostSpoolListUsedDataPoint(ts, "1")
	mb.RecordSapnetweaverIcmAvailabilityDataPoint(ts, 1, AttributeControlState(1))
	mb.RecordSapnetweaverLocksEnqueueCountDataPoint(ts, 1)
	mb.RecordSapnetweaverSessionsBrowserCountDataPoint(ts, "1")
	mb.RecordSapnetweaverSessionsEjbCountDataPoint(ts, "1")
	mb.RecordSapnetweaverSessionsHTTPCountDataPoint(ts, "1")
	mb.RecordSapnetweaverSessionsSecurityCountDataPoint(ts, "1")
	mb.RecordSapnetweaverSessionsWebCountDataPoint(ts, "1")
	mb.RecordSapnetweaverShortDumpsRateDataPoint(ts, "1")
	mb.RecordSapnetweaverWorkProcessesActiveCountDataPoint(ts, "1")

	metrics := mb.Emit()

	assert.Equal(t, 0, metrics.ResourceMetrics().Len())
}
