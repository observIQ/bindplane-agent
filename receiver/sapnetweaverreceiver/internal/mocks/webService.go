// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "github.com/observiq/observiq-otel-collector/receiver/sapnetweaverreceiver/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// MockWebService is an autogenerated mock type for the MockWebService type
type MockWebService struct {
	mock.Mock
}

// ABAPGetSystemWPTable provides a mock function with given fields:
func (_m *MockWebService) ABAPGetSystemWPTable() (*models.ABAPGetSystemWPTableResponse, error) {
	ret := _m.Called()

	var r0 *models.ABAPGetSystemWPTableResponse
	if rf, ok := ret.Get(0).(func() *models.ABAPGetSystemWPTableResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ABAPGetSystemWPTableResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DpmonExecute provides a mock function with given fields: paths
func (_m *MockWebService) DpmonExecute(paths string) (string, error) {
	ret := _m.Called(paths)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(paths)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(paths)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnqGetStatistic provides a mock function with given fields:
func (_m *MockWebService) EnqGetStatistic() (*models.EnqGetStatisticResponse, error) {
	ret := _m.Called()

	var r0 *models.EnqGetStatisticResponse
	if rf, ok := ret.Get(0).(func() *models.EnqGetStatisticResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EnqGetStatisticResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFile provides a mock function with given fields: args
func (_m *MockWebService) FindFile(args ...string) ([]string, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(...string) []string); ok {
		r0 = rf(args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlertTree provides a mock function with given fields:
func (_m *MockWebService) GetAlertTree() (*models.GetAlertTreeResponse, error) {
	ret := _m.Called()

	var r0 *models.GetAlertTreeResponse
	if rf, ok := ret.Get(0).(func() *models.GetAlertTreeResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetAlertTreeResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceProperties provides a mock function with given fields:
func (_m *MockWebService) GetInstanceProperties() (*models.GetInstancePropertiesResponse, error) {
	ret := _m.Called()

	var r0 *models.GetInstancePropertiesResponse
	if rf, ok := ret.Get(0).(func() *models.GetInstancePropertiesResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetInstancePropertiesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProcessList provides a mock function with given fields:
func (_m *MockWebService) GetProcessList() (*models.GetProcessListResponse, error) {
	ret := _m.Called()

	var r0 *models.GetProcessListResponse
	if rf, ok := ret.Get(0).(func() *models.GetProcessListResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetProcessListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueueStatistic provides a mock function with given fields:
func (_m *MockWebService) GetQueueStatistic() (*models.GetQueueStatisticResponse, error) {
	ret := _m.Called()

	var r0 *models.GetQueueStatisticResponse
	if rf, ok := ret.Get(0).(func() *models.GetQueueStatisticResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetQueueStatisticResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemInstanceList provides a mock function with given fields:
func (_m *MockWebService) GetSystemInstanceList() (*models.GetSystemInstanceListResponse, error) {
	ret := _m.Called()

	var r0 *models.GetSystemInstanceListResponse
	if rf, ok := ret.Get(0).(func() *models.GetSystemInstanceListResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetSystemInstanceListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OSExecute provides a mock function with given fields: command
func (_m *MockWebService) OSExecute(command string) (*models.OSExecuteResponse, error) {
	ret := _m.Called(command)

	var r0 *models.OSExecuteResponse
	if rf, ok := ret.Get(0).(func(string) *models.OSExecuteResponse); ok {
		r0 = rf(command)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.OSExecuteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewWebService interface {
	mock.TestingT
	Cleanup(func())
}

// newWebService creates a new instance of webService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newWebService(t mockConstructorTestingTnewWebService) *MockWebService {
	mock := &MockWebService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
