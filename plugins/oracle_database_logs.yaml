version: 0.0.1
title: oracle_database
description: Oracle Database
parameters:
  - name: enable_audit_log
    description: Enable to collect OracleDB audit logs
    type: bool
    default: true
  - name: audit_log_path
    description: Path to the audit log file
    type: "[]string"
    default:
      - "/u01/app/oracle/product/*/dbhome_1/admin/*/adump/*.aud"
  - name: enable_alert_log
    description: Enable to collect OracleDB alert logs
    type: bool
    default: true
  - name: alert_log_path
    description: Path to the alert log file
    type: "[]string"
    default:
      - /u01/app/oracle/product/*/dbhome_1/diag/rdbms/*/*/trace/alert_*.log
  - name: enable_listener_log
    description: Enable to collect OracleDB listener logs
    type: bool
    default: true
  - name: listener_log_path
    description: Path to the listener log file
    type: "[]string"
    default:
      - /u01/app/oracle/product/*/dbhome_1/diag/tnslsnr/*/listener/alert/log.xml
  - name: start_at
    description: At startup, where to start reading logs from the file (`beginning` or `end`)
    type: string
    supported:
      - beginning
      - end
    default: end
  - name: offset_storage_dir
    description: The directory that the offset storage file will be created
    type: string
    default: ${env:OIQ_OTEL_COLLECTOR_HOME}/storage
template: |
  extensions:
    file_storage:
      directory: {{ .offset_storage_dir }}
  receivers:
    {{ if .enable_audit_log }}
    filelog/audit:
      storage: file_storage
      include:
        {{ range $fp := .audit_log_path }}
        - '{{ $fp }}'
        {{end}}
      start_at: {{ .start_at }}
      multiline:
        line_start_pattern: '\w+\s+\w+\s{1,2}\d{1,2}\s+\d{2}:\d{2}:\d{2}\s+\d{4}\s+[-+]\d{2}:\d{2}\n|^Audit [fF]ile '
      operators:
      - type: router
        routes:
          - output: audit_regex_parser_action
            expr: body matches '\\w+ \\w+\\s{1,2}\\d{1,2} \\d{2}:\\d{2}:\\d{2} \\d{4} [-+]\\d{2}:\\d{2}\\nLENGTH\\s:\\s\\D\\d+\\D\\nACTION'
          - output: audit_regex_parser_session
            expr: body matches '\\w+ \\w+\\s{1,2}\\d{1,2} \\d{2}:\\d{2}:\\d{2} \\d{4} [-+]\\d{2}:\\d{2}\\nLENGTH:\\s\\D\\d+\\D\\nSESSION'
          - output: server_start_regex_parser
            expr: body startsWith 'Audit file '
        default: add

      - id: audit_regex_parser_action
        type: regex_parser
        regex: '^(?P<timestamp>\w+ \w+\s{1,2}\d{1,2} \d{2}:\d{2}:\d{2} \d{4} [-+]\d{2}:\d{2})\nLENGTH : \D(?P<length>\d*)\D\nACTION :\[\d+\]\s+\D(?P<action>[\d\w[:ascii:]]+?)\D\nDATABASE USER:\[\d+\]\s+\D(?P<database_user>[^\s]+)\D\n(PRIVILEGE :\[\d+\]\s+\D(?P<privilege>[^\s]+)\D\n)?(CLIENT USER:\[\d+\]\s+\D(?P<client_user>[^\s]+|)\D\n)?(CLIENT TERMINAL:\[\d+\]\s+\D(?P<client_terminal>[^\s]+|)\D\n)?(STATUS:\[\d+\]\s+\D(?P<status_code>[^\s]+|)\D\n)?(DBID:\[\d+\]\s\D(?P<dbid>[^\s]+|)\D\n)?(SESSIONID:\[\d+\]\s+\D(?P<sessionid>[^\s]+|)\D\n)?(USERHOST:\[\d+\]\s+\D(?P<userhost>[^\s]+|)\D\n)?(CLIENT ADDRESS:\[\d+\]\s+\D(?P<client_address>[^\s]+|)\D\n)?(ACTION NUMBER:\[\d+\]\s+\D(?P<action_number>[^\s]+|)\D\n)?'
        timestamp:
          parse_from: attributes.timestamp
          layout: '%a %h %g %H:%M:%S %Y %j'
        output: add

      - id: audit_regex_parser_session
        type: regex_parser
        regex: '^(?P<timestamp>\w+ \w+\s{1,2}\d{1,2} \d{2}:\d{2}:\d{2} \d{4} [-+]\d{2}:\d{2})\nLENGTH: \D(?P<length>\d*)\D\n(SESSIONID:\[\d+\]\s+\D(?P<sessionid>[^\s]+|)\D[\n\s]+)?(ENTRYID:\[\d+\]\s+\D(?P<entryid>[^\s]+|)\D[\n\s]+)?(STATEMENT:\[\d+\]\s+\D(?P<statement>[^\s]+|)\D[\n\s]+)?(USERID:\[\d+\]\s+\D(?P<userid>[^\s]+|)\D[\n\s]+)?(USERHOST:\[\d+\]\s+\D(?P<userhost>[^\s]+|)\D[\n\s]+)?(TERMINAL:\[\d+\]\s+\D(?P<terminal>[\d\w[:ascii:]]+?|)\D[\n\s]+)?ACTION:\[\d+\]\s+\D(?P<action>[\d\w[:ascii:]]+?|)\D[\n\s]+(RETURNCODE:\[\d+\]\s+\D(?P<returncode>[^\s]+|)\D[\n\s]+)?(COMMENT\$$TEXT:\[\d+\]\s+\D(?P<comment_text>[^"]+|)\D[\n\s]+)?(LOGOFF\$$PREAD:\[\d+\]\s+\D(?P<logoff_pread>[^"]+|)\D[\n\s]+)?(LOGOFF\$$LREAD:\[\d+\]\s+\D(?P<logoff_lread>[^"]+|)\D[\n\s]+)?(LOGOFF\$$LWRITE:\[\d+\]\s+\D(?P<logoff_lwrite>[^"]+|)\D[\n\s]+)?(LOGOFF\$$DEAD:\[\d+\]\s+\D(?P<logoff_dead>[^"]+|)\D[\n\s]+)?(OBJ\$$CREATOR:\[\d+\]\s+\D(?P<obj_creator>[^"]+|)\D[\n\s]+)?(OBJ\$$NAME:\[\d+\]\s+\D(?P<obj_name>[^"]+|)\D[\n\s]+)?(OBJ\$$PRIVILEGES:\[\d+\]\s+\D(?P<obj_privileges>[^"]+|)\D[\n\s]+)?(AUTH\$$GRANTEE:\[\d+\]\s+\D(?P<auth_grantee>[^"]+|)\D[\n\s]+)?(OS\$$USERID:\[\d+\]\s+\D(?P<os_userid>[^\s]+|)\D[\n\s]+)?(DBID:\[\d+\]\s+\D(?P<dbid>[^\s]+|)\D[\n\s]+)?(SESSIONCPU:\[\d+\]\s+\D(?P<sessioncpu>\d+|)\D[\n\s]+)?(PRIV\$$USED:\[\d+\]\s+\D(?P<priv_user>[^\s]+|)\D[\n\s]+)?'
        timestamp:
          parse_from: attributes.timestamp
          layout: '%a %h %g %H:%M:%S %Y %j'
        output: add

      - id: server_start_regex_parser
        type: regex_parser
        regex: '(?P<message>[\d\w[:ascii:]]+)'
        output: add

      - type: add
        field: attributes.log_type
        value: oracledb.audit
    {{ end }}

    {{ if .enable_alert_log }}
    filelog/alert:
      storage: file_storage
      include:
        {{ range $fp := .alert_log_path }}
        - '{{ $fp }}'
        {{end}}
      start_at: {{ .start_at }}
      multiline:
        line_start_pattern: '^\w+ \w+ \d{2} \d{2}:\d{2}:\d{2} \d{4}|\d{4}-\d{2}-\d{2}T\d{1,}:\d{2}:\d{2}.\d+[+-]\d+:\d+|^<msg time=\D\d{4}-\d{2}-\d{2}T\d{1,}:\d{2}:\d{2}.\d+[+-]\d+:\d+'
      operators:
        - type: router
          routes:
            - output: xml_alert_regex_parser
              expr: body matches '^<msg time=\\D\\d{4}-\\d{2}-\\d{2}T\\d{1,}:\\d{2}:\\d{2}.\\d+[+-]\\d+:\\d+'
            - output: alert121_regex_parser
              expr: body matches '^\\w+ \\w+ \\d{2} \\d{2}:\\d{2}:\\d{2} \\d{4}'
            - output: alert122_regex_parser
              expr: body matches '^\\d{4}-\\d{2}-\\d{2}T\\d{1,}:\\d{2}:\\d{2}.\\d+[+-]\\d+:\\d+'
          default: add

        # Alert log looks to be xml attempt to parse with regex
        - id: xml_alert_regex_parser
          type: regex_parser
          regex: '^<msg\s+time=\D(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[+-]\d{2}:\d{2})\D(\s+)?(org_id=\D(?P<org_id>[\w\d]+)\D)?(\s+)?(comp_id=\D(?P<comp_id>[\w\d]+)\D)?(\s+)?(msg_id=\D(?P<msg_id>[\w\d:]+)\D)?(\s+)?(type=\D(?P<type>\w+)\D)?(\s+)?(group=\D(?P<group>[\w ]+)\D)?(\s+)?(level=\D(?P<level>\d+)\D)?(\s+)?(host_id=\D(?P<host_id>[\.\w\d-_]+)\D)?(\s+)?(host_addr=\D(?P<host_addr>[\d\.]+)\D)?(\s+)?(module=\D(?P<module>[\w-\s@()]+)\D)?(\s+)?(pid=\D(?P<pid>\d+)\D)?(\s+)?(\s+)?(version=\D(?P<version>\d+)\D)?(\s+)?>\s+<txt>(?P<txt>[\d\D\s]+)</txt>(\s+)?</msg>'
          timestamp:
            parse_from: attributes.timestamp
            layout: '%Y-%m-%dT%T.%L%j'
          output: add

        # Alert log parser for 12.1 timestamp
        - id: alert121_regex_parser
          type: regex_parser
          regex: '(?P<timestamp>\w+ \w+ \d{2} \d{2}:\d{2}:\d{2} \d{4})\n((?P<message>[\d\w[:ascii:]]*))?'
          timestamp:
            parse_from: attributes.timestamp
            layout: '%c'
          output: regex_empty_message_filter

        # Alert log parser for 12.2 timestamp
        - id: alert122_regex_parser
          type: regex_parser
          regex: '(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{1,}:\d{2}:\d{2}.\d+[+-]\d+:\d+)\n((?P<message>[\d\w[:ascii:]]*))?'
          timestamp:
            parse_from: attributes.timestamp
            layout: '%Y-%m-%dT%T.%s%j'
          output: regex_empty_message_filter

        - id: regex_empty_message_filter
          type: filter
          expr: 'attributes.message == ""'
          output: add

        - type: add
          field: attributes.log_type
          value: oracledb.alert
    {{ end }}

    {{ if .enable_listener_log }}
    filelog/listener:
      storage: file_storage
      include:
        {{ range $fp := .listener_log_path }}
        - '{{ $fp }}'
        {{end}}
      start_at: {{ .start_at }}
      multiline:
        line_start_pattern: '/[\w\d/]+:|\\[\w\d\\]+:|\d{4}-\d{2}-\d{2}T\d{1}:\d{2}:\d{2}.\d+[+-]\d+:\d+|<msg time=\D\d{4}-\d{2}-\d{2}T\d{1,}:\d{2}:\d{2}.\d+[+-]\d+:\d+'
      operators:
        - id: listener_router
          type: router
          routes:
            - output: xml_listener_regex_parser
              expr: body matches '<msg time=\\D\\d{4}-\\d{2}-\\d{2}T\\d{1,}:\\d{2}:\\d{2}.\\d+[+-]\\d+:\\d+'
            - output: linux_listener_regex_parser
              expr: body matches '/[\\w\\d/]+:'
            - output: windows_listener_regex_parser
              expr: body matches '\\\\[\\d\\D\\\\]*:'
            - output: trace_listener_regex_parser
              expr: body matches '\\d{4}-\\d{2}-\\d{2}T\\d{1}:\\d{2}:\\d{2}.\\d+[+-]\\d+:\\d+'
          default: add

        - id: linux_listener_regex_parser
          type: regex_parser
          regex: '(?P<path>/[\w\d/\\]+:)\s(?P<status_code>\w+).*\n\nLSNRCTL for (?P<os>[\w\s]+):\sVersion\s(?P<listener_version>[\d\.]+)\s-\s\w+\son\s(?P<timestamp>\d{2}-\w{3}-\d{4}\s\d{2}:\d{2}:\d{2})\n\n(?P<copyright>[\d\w[:ascii:]]+)\n\n(?P<message>[\d\w[:ascii:]]+)'
          timestamp:
            parse_from: attributes.timestamp
            layout: '%d-%h-%Y %T'
          output: add

        - id: windows_listener_regex_parser
          type: regex_parser
          regex: '(?P<path>\\[\d\w\\]+:)\s(?P<status_code>\w+).*\n\nLSNRCTL for (?P<os>[\w\s]+):\sVersion\s(?P<listener_version>[\d\.]+)\s-\s\w+\son\s(?P<timestamp>\d{2}-\w{3}-\d{4}\s\d{2}:\d{2}:\d{2})\n\n(?P<copyright>[\d\w[:ascii:]]+)\n\n(?P<message>[\d\w[:ascii:]]+)'
          timestamp:
            parse_from: attributes.timestamp
            layout: '%d-%h-%Y %T'
          output: add

        - id: trace_listener_regex_parser
          type: regex_parser
          regex: '(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{1}:\d{2}:\d{2}.\d+[+-]\d+:\d+)\s+(?P<message>[\d\D\s]+)'
          timestamp:
            parse_from: attributes.timestamp
            layout: '%Y-%m-%dT%T.%L%j'
          output: add

        - id: xml_listener_regex_parser
          type: regex_parser
          regex: '<msg\s+time=\D(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}[+-]\d{2}:\d{2})\D(\s+)?(org_id=\D(?P<org_id>[\w\d]+)\D)?(\s+)?(comp_id=\D(?P<comp_id>[\w\d]+)\D)?(\s+)?(msg_id=\D(?P<msg_id>[\w\d:]+)\D)?(\s+)?(type=\D(?P<type>\w+)\D)?(\s+)?(group=\D(?P<group>[\w ]+)\D)?(\s+)?(level=\D(?P<level>\d+)\D)?(\s+)?(host_id=\D(?P<host_id>[\.\w\d-_]+)\D)?(\s+)?(host_addr=\D(?P<host_addr>[:a-fA-F\d\.]+)\D)?(\s+)?(module=\D(?P<module>[\w-\s@()]+)\D)?(\s+)?(pid=\D(?P<pid>\d+)\D)?(\s+)?(\s+)?(version=\D(?P<version>\d+)\D)?(\s+)?>\s+<txt>(?P<txt>[\d\D\s]+)</txt>(\s+)?</msg>'
          timestamp:
            parse_from: attributes.timestamp
            layout: '%Y-%m-%dT%T.%L%j'
          output: add

        - type: add
          field: attributes.log_type
          value: oracledb.listener
    {{ end }}

  service:
    extensions: [file_storage]
    pipelines:
      logs:
        receivers:
          {{ if .enable_audit_log }}
          - filelog/audit
          {{ end }}
          {{ if .enable_alert_log }}
          - filelog/alert
          {{ end }}
          {{ if .enable_listener_log }}
          - filelog/listener
          {{ end }}
