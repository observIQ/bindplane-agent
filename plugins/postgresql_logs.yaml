version: 0.0.1
title: PostgreSQL
description: |
  Log parser for PostgreSQL. 
  This plugin supports normal logging and slow query logging.
  Slow query logging can be enabled via the following steps:

    1. Open postgresql.conf (found by running psql -U postgres -c 'SHOW config_file')
    2. Replace the line #log_min_duration_statement = -1 with log_min_duration_statement = 1000.
       This will log all queries executing longer than 1000ms (1s).
    3. Save the configuration and restart PostgreSQL
parameters:
  - name: postgresql_log_path
    type: "[]string"
    default:
      # Default log paths for Debain / Ubuntu
      - "/var/log/postgresql/postgresql*.log"
      # Default log paths for SLES
      - "/var/lib/pgsql/data/log/postgresql*.log"
      # Default log paths for CentOS / RHEL
      - "/var/lib/pgsql/*/data/log/postgresql*.log"
  - name: start_at
    type: string
    supported:
      - beginning
      - end
    default: end
template: |
  receivers:
    filelog:
      include:
        {{ range $i, $fp := .postgresql_log_path }}
        - '{{ $fp }}'
        {{end}}
      start_at: {{ .start_at }}
      multiline:
        line_start_pattern: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3,}'
      attributes:
        log_type: 'postgresql.general'
      operators:
        - type: regex_parser
          regex: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3,} \w+)\s*\[(?P<tid>\d+)\](?:\s+(?P<role>\S*)@(?P<user>\S*))?\s*(?P<level>\w+):\s+(?P<message>(?:\s*duration:\s*(?P<duration>[\d\.:]*)\s*ms\s*)?.*)'
          timestamp:
            parse_from: attributes.timestamp
            layout: '%F %T %Z'
          # Log level mapping from https://www.postgresql.org/docs/14/runtime-config-logging.html#RUNTIME-CONFIG-SEVERITY-LEVELS
          severity:
            parse_from: attributes.level
            mapping:
              debug: 'DEBUG1'
              debug2: 'DEBUG2'
              debug3: 'DEBUG3'
              debug4:
                - 'DEBUG4'
                - 'DEBUG5'
                - 'DETAIL'
                - 'STATEMENT'
                - 'HINT'
              info:
                - 'INFO'
                - 'LOG'
                - 'NOTICE'
              error: 'ERROR'
              warn: 'WARNING'
              fatal:
                - 'FATAL'
                - 'PANIC'

        - id: slow_query
          type: add
          if: 'attributes.duration != ""'
          field: attributes.log_type
          value: 'postgresql.slow_query'

        - type: router
          default: statement_regex_parser
          routes:
            - output: client_address_regex_parser
              expr: 'attribute.user != nil and attribute.user matches "[\\w\\.]*\\([\\d]*\\)"'

        - id: client_address_regex_parser
          type: regex_parser
          parse_from: attributes.user
          regex: '(?P<user>[^\(]*)\((?P<client_address_port>[^\)]*)\)'
          output: statement_regex_parser

        - id: statement_regex_parser
          if: 'attributes.message matches "STATEMENT:\\s+|statement:\\s+"'
          type: regex_parser
          parse_from: attributes.message
          regex: '(STATEMENT:\s*|statement:\s*)(?P<statement>[\w\W]+)'

        - id: sql_command_alter
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^ALTER|^alter"'
          field: attributes.sql_command
          value: "ALTER"

        - id: sql_command_commit
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^COMMIT|^commit"'
          field: attributes.sql_command
          value: "COMMIT"

        - id: sql_command_copy
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^COPY|^copy"'
          field: attributes.sql_command
          value: "COPY"

        - id: sql_command_create
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^CREATE|^create"'
          field: attributes.sql_command
          value: "CREATE"

        - id: sql_command_delete
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^DELETE|^delete"'
          field: attributes.sql_command
          value: "DELETE"

        - id: sql_command_drop
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^DROP|^drop"'
          field: attributes.sql_command
          value: "DROP"

        - id: sql_command_grant
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^GRANT|^grant"'
          field: attributes.sql_command
          value: "GRANT"

        - id: sql_command_insert
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^INSERT|^insert"'
          field: attributes.sql_command
          value: "INSERT"

        - id: sql_command_revoke
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^REVOKE|^revoke"'
          field: attributes.sql_command
          value: "REVOKE"

        - id: sql_command_rollback
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^ROLLBACK|^rollback"'
          field: attributes.sql_command
          value: "ROLLBACK"

        - id: sql_command_select
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^SELECT|^select"'
          field: attributes.sql_command
          value: "SELECT"

        - id: sql_command_truncate
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^TRUNCATE|^truncate"'
          field: attributes.sql_command
          value: "TRUNCATE"

        - id: sql_command_update
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^UPDATE|^update"'
          field: attributes.sql_command
          value: "UPDATE"

        - id: sql_command_vacuum
          type: add
          if: 'attributes.statement != nil and attributes.statement matches "^VACUUM|^vacuum"'
          field: attributes.sql_command
          value: "VACUUM"

  service:
    pipelines:
      logs:
        receivers: [filelog]
