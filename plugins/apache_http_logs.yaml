version: 0.0.1
title: Apache HTTP Server
description: Log parser for Apache HTTP Server
parameters:
  - name: log_format
    description: When choosing the 'default' option, the agent will expect and parse logs in a format that matches the default logging configuration. When choosing the 'observIQ' option, the agent will expect and parse logs in an optimized JSON format that adheres to the observIQ specification, requiring an update to the apache2.conf file. See the Apache HTTP Server source page for more information.
    type: string
    supported:
      - default
      - observiq
    default: default
  - name: enable_access_log
    description: Enable to collect Apache HTTP Server access logs
    type: bool
    default: true
  - name: access_log_path
    description: Path to access log file
    type: "[]string"
    default: 
      - "/var/log/apache2/access.log"
  - name: enable_error_log
    description: Enable to collect Apache HTTP Server error logs
    type: bool
    default: true
  - name: error_log_path
    description: Path to error log file
    type: "[]string"
    default: 
      - "/var/log/apache2/error.log"
  - name: start_at
    description: Start reading file from 'beginning' or 'end'
    type: string
    supported:
     - beginning
     - end
    default: end

template: |
  receivers:
  {{ if .enable_access_log }}
    filelog/access_log:
      include:
        # {{ range $fp := .access_log_path }}
        - '{{ $fp }}'
        # {{end}}
      start_at: {{ .start_at }}
      attributes:
        log_type: 'apache_http.access'
      operators:
        {{ if eq .log_format "default" }}
        - id: access_regex_parser
          type: regex_parser
          regex: '^(?P<remote_addr>[^ ]*) (?P<remote_host>[^ ]*) (?P<remote_user>[^ ]*) \[(?P<timestamp>[^\]]*)\] "(?P<method>\S+) +(?P<path>[^ ]*)( (?P<protocol>[^/]*)/(?P<protocol_version>[^\"]*)|[^\"]*)?" (?P<status>[^ ]*) (?P<body_bytes_sent>[^ ]*)(?: "(?P<http_referer>[^\"]*)" "(?P<http_user_agent>[^\"]*)"(?:\s+(?P<http_x_forwarded_for>[^ ]+))?)?'
          timestamp:
            parse_from: attributes.timestamp
            layout: '%d/%b/%Y:%H:%M:%S %z'
          severity:
            parse_from: attributes.status
            preset: none
            preserve_to: attributes.status
            mapping:
              info: 2xx
              info2: 3xx
              warn: 4xx
              error: 5xx
          output: end_filter
        {{ end }}

        - id: access_json_parser
          type: json_parser
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%dT%H:%M:%S.%s%z'
          severity:
            parse_from: attributes.status
            preset: none
            preserve_to: attributes.status
            mapping:
              info: 2xx
              info2: 3xx
              warn: 4xx
              error: 5xx
          output: access_protocol_parser
        
        - id: access_protocol_parser
          type: regex_parser
          parse_from: attributes.protocol
          regex: '(?P<protocol>[^/]*)/(?P<protocol_version>.*)'
          output: end_filter

        # Noop filter to allow an exit point for other operators
        - id: end_filter
          type: filter
          expr: 'body == ""'
    {{ end }}

  {{ if .enable_error_log }}
    filelog/error_log:
      include:
        {{ range $fp := .error_log_path }}
        - '{{ $fp }}'
        {{end}}
      start_at: {{ .start_at }}
      # {{ if eq .log_format "default" }}
      multiline:
        line_start_pattern: '\[(?P<time>\w+ \w+ \d{2} \d{2}:\d{2}:\d{2}\.\d+ \d+)\] '
      # {{ end }}
      attributes:
        log_type: 'apache_http.error'
      operators:
        {{ if eq .log_format "default" }}
        - id: error_regex_parser
          type: regex_parser
          regex: '^\[(?P<timestamp>\w+ \w+ \d{2} \d{2}:\d{2}:\d{2}\.\d+ \d+)\] \[(?P<module>\w+):(?P<log_level>[\w\d]+)\] \[pid (?P<pid>\d+)(?::tid (?P<tid>[\d]+))?\](?: \[client (?P<client>[^\]]*)\])? (?P<error_code>[^:]+): (?P<message>.*)'
          timestamp:
            parse_from: attributes.timestamp
            layout: '%a %b %d %T.%s %Y'
          severity:
            parse_from: attributes.log_level
            mapping:
              info2: notice
              error2: crit
              error3: alert
              fatal2: emerg
              trace:
                - trace1
                - trace2
                - trace3
                - trace4
                - trace5
                - trace6
                - trace7
                - trace8
          output: end_filter
        {{ end }}

        - id: error_json_parser
          type: json_parser
          timestamp:
            parse_from: attributes.time
            layout: '%Y-%m-%d %H:%M:%S.%s'
          severity:
            parse_from: attributes.log_level
            mapping:
              info2: notice
              error2: crit
              error3: alert
              fatal2: emerg
              trace:
                - trace1
                - trace2
                - trace3
                - trace4
                - trace5
                - trace6
                - trace7
                - trace8
          output: error_message_parser

        - id: error_message_parser
          type: regex_parser
          parse_from: attributes.message
          regex: '(?P<error_code>[^:]*):(?P<message>.*)'
          output: end_filter

        # Noop filter to allow an exit point for other operators
        - id: end_filter
          type: filter
          expr: 'body == ""'
  {{ end }}
  
  service:
    pipelines:
      logs:
        receivers:  
        #  {{ if .enable_access_log }}
          - filelog/access_log
        # {{ end }}
        # {{ if .enable_error_log }}
          - filelog/error_log
        # {{ end }}

        